/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PoolGame;

import java.io.IOException;

import PoolGame.Items.Pocket;
import PoolGame.Items.PoolTable;
import org.json.simple.parser.ParseException;

import PoolGame.ConfigReader.ConfigKeyMissingException;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.Button;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.util.Duration;

/** The JavaFX application */
public class App extends Application {

    private final double FRAMETIME = 1.0 / 60.0;

    private ConfigReader loadConfig(String args) {
        String configPath;
        boolean isResourcesDir = false;
        if (!args.isEmpty()) {
            configPath = args;
        } else {
            // configPath = "src/main/resources/config.json";
            configPath = "/config.json";
        }
        isResourcesDir = true;
        // parse the file:
        ConfigReader config = null;
        try {
            config = new ConfigReader(configPath, isResourcesDir);
        } catch (IOException | ParseException | ConfigKeyMissingException | IllegalArgumentException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        }
        return config;
    }

    @Override
    public void start(Stage stage) {
        Group root = new Group();
        Scene scene = new Scene(root);

        stage.setScene(scene);
        stage.setTitle("PoolGame");
        stage.show();

        ConfigReader config = loadConfig("");
        Game game = new Game(config);

        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());

        stage.setWidth(game.getWindowDimX());
        stage.setHeight(game.getWindowDimY() +
                Pocket.RADIUS +
                PoolTable.POCKET_OFFSET +
                4); // Magic number to get bottom to align

        root.getChildren().add(canvas);
        game.addDrawables(root);

        initReload(canvas, root, game);

        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(FRAMETIME), (actionEvent) -> game.tick());

        timeline.getKeyFrames().add(frame);
        timeline.play();
    }

    void initReload(Canvas canvas, Group root, Game game) {
        Button easyMode = new Button("Easy");
        easyMode.setLayoutX(720);
        easyMode.setLayoutY(30);
        root.getChildren().add(easyMode);
        easyMode.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                ConfigReader config = loadConfig(
                        "/config_easy.json");
                root.getChildren().clear();
                game.reload(config);
                root.getChildren().add(canvas);
                game.addDrawables(root);
                initReload(canvas, root, game);
            }
        });

        Button normalMode = new Button("Normal");
        normalMode.setLayoutX(720);
        normalMode.setLayoutY(60);
        root.getChildren().add(normalMode);
        normalMode.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                ConfigReader config = loadConfig(
                        "/config_normal.json");
                root.getChildren().clear();
                game.reload(config);
                root.getChildren().add(canvas);
                game.addDrawables(root);
                initReload(canvas, root, game);
            }
        });

        Button hardMode = new Button("Hard");
        hardMode.setLayoutX(720);
        hardMode.setLayoutY(90);
        root.getChildren().add(hardMode);
        hardMode.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                ConfigReader config = loadConfig(
                        "/config_hard.json");
                root.getChildren().clear();
                game.reload(config);
                root.getChildren().add(canvas);
                game.addDrawables(root);
                initReload(canvas, root, game);
            }
        });
    }

    /**
     * The entry point of the program
     * 
     * @param args CLI arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}
